from queue import Queue
from validator import Validator


class Fibonacci:
    def __init__(self):
        self.validator = Validator()
    
    def get_even_sum(self, limit):
        """
        Even Fibonacci Numbers
        Problem 2

        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
        `1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...`
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

        precondition:
        limit is a natural number.  

        postcondition:
        get_even_sum returns a natural number, the sum of all even Fibonacci numbers less than or equal to the limit  
        """

        self.validator.precondition(self._is_valid_integer(limit), "Limit must be a natural number")
        if limit == 1:
            return 0
        
        even_sum = 2
        if limit == 2:
            return even_sum
        
        q = Queue(2)
        q.put(1)
        q.put(2)

        while limit > 2:
            current = q.get()
            current += q.queue[0]
            if current % 2 == 0:
                even_sum += current
            q.put(current)
            limit -= 1
   
        return even_sum
    
    def _is_valid_integer(self, limit):
        if limit <=0:
            return False
        return isinstance(limit, int)
    
